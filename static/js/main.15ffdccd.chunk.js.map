{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","_useDrivePicker","useDrivePicker","_useDrivePicker2","Object","slicedToArray","openPicker","data","_useState","useState","_useState2","loading","setLoading","handleOpenPicker","encrypt","mult","clientId","developerKey","viewId","setEnableDrives","showUploadView","showUploadFolders","supportDrives","multiselect","useEffect","docs","length","requestOptions","method","headers","Content-Type","body","JSON","stringify","fetch","then","response","json","alert","catch","error","i","Uploaddata","name","id","mimeType","react_default","a","createElement","Fragment","className","react_loading_default","type","color","onClick","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App_0"],"mappings":"6NAgGeA,SAxFH,WAAM,IAAAC,EACWC,MADXC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACTK,EADSH,EAAA,GACGI,EADHJ,EAAA,GAAAK,EAEcC,oBAAS,GAFvBC,EAAAN,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAETG,EAFSD,EAAA,GAEAE,EAFAF,EAAA,GAIVG,EAAmB,SAACC,EAASC,GACjCT,EAAW,CACTU,SAAU,0EACVC,aAAc,0CACdC,OAAQ,CAAC,OAAQ,SAAU,aAC3BC,iBAAiB,EACjBC,eAAgBN,EAChBO,mBAAmB,EACnBC,eAAe,EACfC,YAAaR,KAoDjB,OAhDAS,oBAAU,WAGR,GAAGjB,EAGD,GAAGA,EAAKkB,KAAKC,OAAS,EAAE,CACtB,IAAMC,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CAAEC,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU1B,IAEvBK,GAAW,GACXsB,MAAM,eAAgBP,GAAgBQ,KAAK,SAACC,GAAD,OAAcA,EAASC,SAAQF,KAAK,SAAAC,GAAQ,OAAIxB,GAAW,KAAQuB,KAAK,SAAAC,GAAa,OAAOE,MAAM,sCAAsCC,MAAM,SAACC,GAAW5B,GAAW,GAAQ0B,MAAM,uBAK5N,CAEF,IAAIG,EAAIlC,EAAKkB,KAAK,GACZiB,EAAa,CACfjB,KAAQ,CACJ,CACIkB,KAAQF,EAAEE,KACVC,GAAMH,EAAEG,GACRC,SAAYJ,EAAEI,YAKlBlB,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CAAEC,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUS,IAGvB9B,GAAW,GACXsB,MAAM,eAAgBP,GAAgBQ,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAAQF,KAAK,SAAAC,GAAQ,OAAIxB,GAAW,KAAQuB,KAAK,SAAAC,GAAa,OAAOE,MAAM,sCAAsCC,MAAM,SAACC,GAAW5B,GAAW,GAAQ0B,MAAM,qBAOjO,CAAC/B,IAIFuC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACAH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cAAlB,+BAGCvC,EACEmC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACdJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAcK,KAAM,kBAAmBC,MAAM,gBAG7CP,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACfJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,gBAAgBI,QAAS,kBAAMzC,GAAiB,GAAM,KAAxE,0BACAiC,EAAAC,EAAAC,cAAA,UAAQE,UAAU,gBAAgBI,QAAS,kBAAMzC,GAAiB,GAAO,KAAzE,6BC3EG0C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAxB,KAAAuB,EAAAE,KAAA,UAAqBzB,KAAK,SAAA0B,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHzB,EAAAC,EAAAC,cAACF,EAAAC,EAAMyB,WAAP,KACE1B,EAAAC,EAAAC,cAACyB,EAAD,QAOJlB","file":"static/js/main.15ffdccd.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport useDrivePicker from 'react-google-drive-picker'\nimport ReactLoading from 'react-loading';\nimport './App.css'\n\n\n// When uploading a file, will need to pass id and mimetype to the backend to find out which encryption type to use.\n\nconst App = () => {\n  const [openPicker, data] = useDrivePicker();\n  const [loading, setLoading] = useState(false);\n\n  const handleOpenPicker = (encrypt, mult) => {\n    openPicker({\n      clientId: \"72145292632-7qcefgk96q5j4abotf8vrjr5gvsu0l45.apps.googleusercontent.com\",\n      developerKey: \"AIzaSyA3MfY1PcmhSlm0m2SWclfP1zNDtUer3do\",\n      viewId: [\"DOCS\", \"SHEETS\", \"DOCUMENTS\"],\n      setEnableDrives: false,\n      showUploadView: encrypt,\n      showUploadFolders: true,\n      supportDrives: true,\n      multiselect: mult,\n    })\n  }\n\n  useEffect(() => {\n\n    // Once files are uploaded, pass data to the backend\n    if(data){\n\n      // For reconstruction\n      if(data.docs.length > 1){\n        const requestOptions = {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(data)\n        };\n        setLoading(true);\n        fetch('/post/decode', requestOptions).then((response) => response.json()).then(response => setLoading(false)).then(response => {return alert('Finished. View Changes on Google')}).catch((error) => {setLoading(false); alert('Error! Retry.')});\n        // alert('Finished. View Changes on Google');\n\n      }\n      // For Encoding\n      else{\n\n        var i = data.docs[0]\n          var Uploaddata = {\n            \"docs\": [\n                {\n                    \"name\": i.name, \n                    \"id\": i.id,\n                    \"mimeType\": i.mimeType,\n                },\n            ]\n          }\n      \n          const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(Uploaddata)\n          };\n\n          setLoading(true);\n          fetch('/post/encode', requestOptions).then(response => response.json()).then(response => setLoading(false)).then(response => {return alert('Finished. View Changes on Google')}).catch((error) => {setLoading(false); alert('Error! Retry.')} );\n          // alert('Finished. View Changes on Google');\n\n      }\n      \n    }\n\n  }, [data])\n\n  \n  return (\n    <React.Fragment>\n    <div className='App'>\n      <header className='App-header'>\n            Google Drive Secret Sharing\n          </header>\n      {loading ? \n        (<div className=\"loading\" >\n          <ReactLoading type={\"spinningBubbles\"} color=\"aquamarine\" />\n        </div>\n        ) : (\n          <div className='main'>\n          <div className='buttons'>\n            <button className='google-picker' onClick={() => handleOpenPicker(true, false)}>Encrypt Your Documents</button>\n            <button className='google-picker' onClick={() => handleOpenPicker(false, true)}>Decrypt Your Shares</button>\n          </div>\n        </div>\n      )}\n    </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}